"""
The Char scalar type represents a display unit of information equivalent to one alphabetic letter or symbol.
"""
scalar Char

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

input FileSystemEntryFilterInput {
  and: [FileSystemEntryFilterInput!]
  or: [FileSystemEntryFilterInput!]
  id: IdOperationFilterInput
  size: LongOperationFilterInput
  path_info: PathInfoFilterInput
  parent_directory: FileSystemDirectoryFilterInput
  library: LibraryFilterInput
}

input LibraryFilterInput {
  and: [LibraryFilterInput!]
  or: [LibraryFilterInput!]
  id: IdOperationFilterInput
  name: StringOperationFilterInput
  slug: StringOperationFilterInput
  path_info: PathInfoFilterInput
  status: FileSystemStatusOperationFilterInput
  is_watched: BooleanOperationFilterInput
  directory: FileSystemDirectoryFilterInput
  entries: ListFilterInputTypeOfFileSystemEntryFilterInput
  concurrency_token: ListByteOperationFilterInput
}

interface FileSystemEntry {
  size: Long!
  path_info: PathInfo!
  library: Library!
  parent_directory: FileSystemDirectory
}

type FileSystemDirectory implements FileSystemEntry & Node {
  id: ID!
  size: Long!
  path_info: PathInfo!
  library: Library!
  parent_directory: FileSystemDirectory
  entries(where: FileSystemEntryFilterInput, order: [FileSystemEntrySortInput!]): [FileSystemEntry!]!
}

type FileSystemFile implements FileSystemEntry & Node {
  id: ID!
  size: Long!
  path_info: PathInfo!
  library: Library!
  parent_directory: FileSystemDirectory
}

type Library implements Node {
  id: ID!
  name: String!
  slug: String!
  path_info: PathInfo!
  status: FileSystemStatus!
  is_watched: Boolean!
  entries(where: FileSystemEntryFilterInput, order: [FileSystemEntrySortInput!]): [FileSystemEntry]
}

type PathInfo {
  name: String!
  full_name: String!
  extension: String
  directory_path: String
  directory_separator_char: Char!
}

type DomainException {
  request_id: UUID
  type: FaultType!
  code: String
  message: String
  time_stamp: DateTime!
  property: String
}

type ValidationException {
  request_id: UUID
  type: FaultType!
  code: String
  message: String
  time_stamp: DateTime!
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  file_system_directory(
    where: FileSystemDirectoryFilterInput
    order: [FileSystemDirectorySortInput!]
  ): FileSystemDirectory
  file_system_entries(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: FileSystemEntryFilterInput
    order: [FileSystemEntrySortInput!]
  ): File_system_entriesConnection
  file_system_entry(where: FileSystemEntryFilterInput, order: [FileSystemEntrySortInput!]): FileSystemEntry
  libraries(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: LibraryFilterInput
    order: [LibrarySortInput!]
  ): LibrariesConnection
  library(where: LibraryFilterInput, order: [LibrarySortInput!]): Library
}

type Mutation {
  library_create(input: Library_createInput!): Library_createPayload!
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input PathInfoFilterInput {
  and: [PathInfoFilterInput!]
  or: [PathInfoFilterInput!]
  name: StringOperationFilterInput
  full_name: StringOperationFilterInput
  extension: StringOperationFilterInput
  directory_path: StringOperationFilterInput
  directory_separator_char: CharOperationFilterInput
}

input FileSystemDirectoryFilterInput {
  and: [FileSystemDirectoryFilterInput!]
  or: [FileSystemDirectoryFilterInput!]
  entries: ListFilterInputTypeOfFileSystemEntryFilterInput
  size: LongOperationFilterInput
  path_info: PathInfoFilterInput
  parent_directory: FileSystemDirectoryFilterInput
  library: LibraryFilterInput
  id: UuidOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input FileSystemStatusOperationFilterInput {
  eq: FileSystemStatus
  neq: FileSystemStatus
  in: [FileSystemStatus!]
  nin: [FileSystemStatus!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListFilterInputTypeOfFileSystemEntryFilterInput {
  all: FileSystemEntryFilterInput
  none: FileSystemEntryFilterInput
  some: FileSystemEntryFilterInput
  any: Boolean
}

input ListByteOperationFilterInput {
  all: ByteOperationFilterInput
  none: ByteOperationFilterInput
  some: ByteOperationFilterInput
  any: Boolean
}

input FileSystemEntrySortInput {
  size: SortEnumType
  path_info: PathInfoSortInput
  parent_directory: FileSystemDirectorySortInput
  library: LibrarySortInput
  id: SortEnumType
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

input CharOperationFilterInput {
  eq: Char
  neq: Char
  in: [Char]
  nin: [Char]
  gt: Char
  ngt: Char
  gte: Char
  ngte: Char
  lt: Char
  nlt: Char
  lte: Char
  nlte: Char
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ByteOperationFilterInput {
  eq: Byte
  neq: Byte
  in: [Byte]
  nin: [Byte]
  gt: Byte
  ngt: Byte
  gte: Byte
  ngte: Byte
  lt: Byte
  nlt: Byte
  lte: Byte
  nlte: Byte
}

enum SortEnumType {
  ASC
  DESC
}

input PathInfoSortInput {
  name: SortEnumType
  full_name: SortEnumType
  extension: SortEnumType
  directory_path: SortEnumType
  directory_separator_char: SortEnumType
}

input FileSystemDirectorySortInput {
  size: SortEnumType
  path_info: PathInfoSortInput
  parent_directory: FileSystemDirectorySortInput
  library: LibrarySortInput
  id: SortEnumType
}

input LibrarySortInput {
  name: SortEnumType
  slug: SortEnumType
  path_info: PathInfoSortInput
  status: SortEnumType
  is_watched: SortEnumType
  directory: FileSystemDirectorySortInput
  id: SortEnumType
}

scalar UUID @specifiedBy(url: "https://tools.ietf.org/html/rfc4122")

"""
The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255.
"""
scalar Byte

enum FileSystemStatus {
  ONLINE
  DEGRADED
  OFFLINE
}

enum FaultType {
  API
  IDEMPOTENCY
  INVALID_REQUEST
  RATE_LIMIT
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

type DomainError implements Error {
  message: String!
}

type ValidationError implements Error {
  message: String!
}

"""
A connection to a list of items.
"""
type File_system_entriesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [File_system_entriesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [FileSystemEntry]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type LibrariesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [LibrariesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Library!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

interface Error {
  message: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type File_system_entriesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FileSystemEntry
}

"""
An edge in a connection.
"""
type LibrariesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Library!
}

input Library_createInput {
  name: String!
  slug: String!
  path: String!
  is_watched: Boolean!
}

union Library_createError = DomainError | ValidationError

type Library_createPayload {
  library: Library
  errors: [Library_createError!]
}
