// <auto-generated />
using System;
using Giantnodes.Service.Dashboard.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Giantnodes.Service.Dashboard.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240128053921_v0.0.1")]
    partial class v001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dashboard")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Encodes.Encode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<byte[]>("ConcurrencyToken")
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DegradedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("degraded_at");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("failed_at");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<float?>("Percent")
                        .HasPrecision(3, 2)
                        .HasColumnType("real")
                        .HasColumnName("percent");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_encodes");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_encodes_file_id");

                    b.ToTable("encodes", "dashboard");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Encodes.Entities.EncodeSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EncodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("encode_id");

                    b.Property<DateTime>("ProbedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("probed_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_encode_snapshots");

                    b.HasIndex("EncodeId")
                        .HasDatabaseName("ix_encode_snapshots_encode_id");

                    b.ToTable("encode_snapshots", "dashboard");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid")
                        .HasColumnName("library_id");

                    b.Property<Guid?>("ParentDirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_directory_id");

                    b.Property<DateTime>("ScannedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scanned_at");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ParentDirectoryId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("boolean")
                        .HasColumnName("is_watched");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_libraries");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_libraries_slug");

                    b.ToTable("libraries", "dashboard");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Persistence.Sagas.EncodeSagaState", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_state");

                    b.Property<string>("InputFullPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("input_full_path");

                    b.Property<string>("OutputFullPath")
                        .HasColumnType("text")
                        .HasColumnName("output_full_path");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("CorrelationId")
                        .HasName("pk_encode_saga_state");

                    b.HasIndex("OutputFullPath")
                        .IsUnique()
                        .HasDatabaseName("ix_encode_saga_state_output_full_path");

                    b.ToTable("encode_saga_state", "dashboard");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer")
                        .HasColumnName("receive_count");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("pk_inbox_state");

                    b.HasAlternateKey("MessageId", "ConsumerId")
                        .HasName("ak_inbox_state_message_id_consumer_id");

                    b.HasIndex("Delivered")
                        .HasDatabaseName("ix_inbox_state_delivered");

                    b.ToTable("inbox_state", "dashboard");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content_type");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("destination_address");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_time");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fault_address");

                    b.Property<string>("Headers")
                        .HasColumnType("text")
                        .HasColumnName("headers");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_consumer_id");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("initiator_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_type");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("response_address");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_time");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("source_address");

                    b.HasKey("SequenceNumber")
                        .HasName("pk_outbox_message");

                    b.HasIndex("EnqueueTime")
                        .HasDatabaseName("ix_outbox_message_enqueue_time");

                    b.HasIndex("ExpirationTime")
                        .HasDatabaseName("ix_outbox_message_expiration_time");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outbox_message_outbox_id_sequence_number");

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_");

                    b.ToTable("outbox_message", "dashboard");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("OutboxId")
                        .HasName("pk_outbox_state");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_outbox_state_created");

                    b.ToTable("outbox_state", "dashboard");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry");

                    b.ToTable("file_system_directories", "dashboard");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.FileSystemFile", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry");

                    b.Property<DateTime?>("ProbedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("probed_at");

                    b.ToTable("file_system_files", "dashboard");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Encodes.Encode", b =>
                {
                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.FileSystemFile", "File")
                        .WithMany("Encodes")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encodes_file_system_files_file_id");

                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Encodes.Values.EncodeSpeed", "Speed", b1 =>
                        {
                            b1.Property<Guid>("EncodeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("speed_bitrate");

                            b1.Property<float>("Frames")
                                .HasColumnType("real")
                                .HasColumnName("speed_frames");

                            b1.Property<float>("Scale")
                                .HasColumnType("real")
                                .HasColumnName("speed_scale");

                            b1.HasKey("EncodeId");

                            b1.ToTable("encodes", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("EncodeId")
                                .HasConstraintName("fk_encodes_encodes_id");
                        });

                    b.Navigation("File");

                    b.Navigation("Speed");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Encodes.Entities.EncodeSnapshot", b =>
                {
                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Encodes.Encode", "Encode")
                        .WithMany("Snapshots")
                        .HasForeignKey("EncodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encode_snapshots_encodes_encode_id");

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Values.AudioStream", "AudioStreams", b1 =>
                        {
                            b1.Property<Guid>("EncodeSnapshotId")
                                .HasColumnType("uuid")
                                .HasColumnName("encode_snapshot_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<int>("Channels")
                                .HasColumnType("integer")
                                .HasColumnName("channels");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<int>("SampleRate")
                                .HasColumnType("integer")
                                .HasColumnName("sample_rate");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("EncodeSnapshotId", "Id")
                                .HasName("pk_encode_snapshots_audio_streams");

                            b1.ToTable("encode_snapshots_audio_streams", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("EncodeSnapshotId")
                                .HasConstraintName("fk_encode_snapshots_audio_streams_encode_snapshots_encode_snap");
                        });

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Values.SubtitleStream", "SubtitleStreams", b1 =>
                        {
                            b1.Property<Guid>("EncodeSnapshotId")
                                .HasColumnType("uuid")
                                .HasColumnName("encode_snapshot_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("EncodeSnapshotId", "Id")
                                .HasName("pk_encode_snapshots_subtitle_streams");

                            b1.ToTable("encode_snapshots_subtitle_streams", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("EncodeSnapshotId")
                                .HasConstraintName("fk_encode_snapshots_subtitle_streams_encode_snapshots_encode_s");
                        });

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Values.VideoStream", "VideoStreams", b1 =>
                        {
                            b1.Property<Guid>("EncodeSnapshotId")
                                .HasColumnType("uuid")
                                .HasColumnName("encode_snapshot_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<double>("Framerate")
                                .HasColumnType("double precision")
                                .HasColumnName("framerate");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("PixelFormat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("pixel_format");

                            b1.HasKey("EncodeSnapshotId", "Id")
                                .HasName("pk_encode_snapshots_video_streams");

                            b1.ToTable("encode_snapshots_video_streams", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("EncodeSnapshotId")
                                .HasConstraintName("fk_encode_snapshots_video_streams_encode_snapshots_encode_snap");

                            b1.OwnsOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.Values.VideoQuality", "Quality", b2 =>
                                {
                                    b2.Property<Guid>("VideoStreamEncodeSnapshotId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("encode_snapshot_id");

                                    b2.Property<int>("VideoStreamId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<string>("AspectRatio")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("quality_aspect_ratio");

                                    b2.Property<int>("Height")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_height");

                                    b2.Property<int>("Resolution")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_resolution");

                                    b2.Property<int>("Width")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_width");

                                    b2.HasKey("VideoStreamEncodeSnapshotId", "VideoStreamId");

                                    b2.ToTable("encode_snapshots_video_streams", "dashboard");

                                    b2.WithOwner()
                                        .HasForeignKey("VideoStreamEncodeSnapshotId", "VideoStreamId")
                                        .HasConstraintName("fk_encode_snapshots_video_streams_encode_snapshots_video_strea");
                                });

                            b1.Navigation("Quality")
                                .IsRequired();
                        });

                    b.Navigation("AudioStreams");

                    b.Navigation("Encode");

                    b.Navigation("SubtitleStreams");

                    b.Navigation("VideoStreams");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry", b =>
                {
                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", "Library")
                        .WithMany("Entries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", "ParentDirectory")
                        .WithMany("Entries")
                        .HasForeignKey("ParentDirectoryId");

                    b.Navigation("Library");

                    b.Navigation("ParentDirectory");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("LibraryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("LibraryId");

                            b1.ToTable("libraries", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("LibraryId")
                                .HasConstraintName("fk_libraries_libraries_id");
                        });

                    b.Navigation("PathInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemDirectoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemDirectoryId");

                            b1.ToTable("file_system_directories", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemDirectoryId")
                                .HasConstraintName("fk_file_system_directories_file_system_directories_id");
                        });

                    b.Navigation("PathInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.FileSystemFile", b =>
                {
                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Values.AudioStream", "AudioStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<int>("Channels")
                                .HasColumnType("integer")
                                .HasColumnName("channels");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<int>("SampleRate")
                                .HasColumnType("integer")
                                .HasColumnName("sample_rate");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("FileSystemFileId", "Id")
                                .HasName("pk_file_system_files_audio_streams");

                            b1.ToTable("file_system_files_audio_streams", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_file_system_files_audio_streams_file_system_files_file_syst");
                        });

                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemFileId");

                            b1.ToTable("file_system_files", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_file_system_files_file_system_files_id");
                        });

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Values.SubtitleStream", "SubtitleStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("FileSystemFileId", "Id")
                                .HasName("pk_file_system_files_subtitle_streams");

                            b1.ToTable("file_system_files_subtitle_streams", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_file_system_files_subtitle_streams_file_system_files_file_s");
                        });

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Values.VideoStream", "VideoStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<double>("Framerate")
                                .HasColumnType("double precision")
                                .HasColumnName("framerate");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("PixelFormat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("pixel_format");

                            b1.HasKey("FileSystemFileId", "Id")
                                .HasName("pk_file_system_files_video_streams");

                            b1.ToTable("file_system_files_video_streams", "dashboard");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_file_system_files_video_streams_file_system_files_file_syst");

                            b1.OwnsOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.Values.VideoQuality", "Quality", b2 =>
                                {
                                    b2.Property<Guid>("VideoStreamFileSystemFileId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("file_system_file_id");

                                    b2.Property<int>("VideoStreamId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<string>("AspectRatio")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("quality_aspect_ratio");

                                    b2.Property<int>("Height")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_height");

                                    b2.Property<int>("Resolution")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_resolution");

                                    b2.Property<int>("Width")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_width");

                                    b2.HasKey("VideoStreamFileSystemFileId", "VideoStreamId");

                                    b2.ToTable("file_system_files_video_streams", "dashboard");

                                    b2.WithOwner()
                                        .HasForeignKey("VideoStreamFileSystemFileId", "VideoStreamId")
                                        .HasConstraintName("fk_file_system_files_video_streams_file_system_files_video_str");
                                });

                            b1.Navigation("Quality")
                                .IsRequired();
                        });

                    b.Navigation("AudioStreams");

                    b.Navigation("PathInfo")
                        .IsRequired();

                    b.Navigation("SubtitleStreams");

                    b.Navigation("VideoStreams");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Encodes.Encode", b =>
                {
                    b.Navigation("Snapshots");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.FileSystemFile", b =>
                {
                    b.Navigation("Encodes");
                });
#pragma warning restore 612, 618
        }
    }
}
