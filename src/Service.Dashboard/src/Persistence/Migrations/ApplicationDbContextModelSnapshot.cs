// <auto-generated />
using System;
using Giantnodes.Service.Dashboard.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Giantnodes.Service.Dashboard.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uuid")
                        .HasColumnName("library_id");

                    b.Property<Guid?>("ParentDirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_directory_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId")
                        .HasDatabaseName("ix_file_system_entries_library_id");

                    b.HasIndex("ParentDirectoryId")
                        .HasDatabaseName("ix_file_system_entries_parent_directory_id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("boolean")
                        .HasColumnName("is_watched");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_libraries");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_libraries_slug");

                    b.ToTable("libraries", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry");

                    b.ToTable("FileSystemDirectories", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.FileSystemFile", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry");

                    b.ToTable("FileSystemFiles", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.FileSystemEntry", b =>
                {
                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", "Library")
                        .WithMany("Entries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_file_system_entries_libraries_library_id");

                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", "ParentDirectory")
                        .WithMany("Entries")
                        .HasForeignKey("ParentDirectoryId")
                        .HasConstraintName("fk_file_system_entries_file_system_directories_parent_directory_id");

                    b.Navigation("Library");

                    b.Navigation("ParentDirectory");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("LibraryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("LibraryId");

                            b1.ToTable("libraries", "public");

                            b1.WithOwner()
                                .HasForeignKey("LibraryId")
                                .HasConstraintName("fk_libraries_libraries_id");
                        });

                    b.Navigation("PathInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemDirectoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemDirectoryId");

                            b1.ToTable("FileSystemDirectories", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemDirectoryId")
                                .HasConstraintName("fk_file_system_directories_file_system_directories_id");
                        });

                    b.Navigation("PathInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.FileSystemFile", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<char>("DirectorySeparatorChar")
                                .HasColumnType("character(1)")
                                .HasColumnName("path_info_directory_separator_char");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemFileId");

                            b1.ToTable("FileSystemFiles", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_file_system_files_file_system_files_id");
                        });

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.Values.AudioStream", "AudioStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<int>("Channels")
                                .HasColumnType("integer")
                                .HasColumnName("channels");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<int>("SampleRate")
                                .HasColumnType("integer")
                                .HasColumnName("sample_rate");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("FileSystemFileId", "Id")
                                .HasName("pk_audio_streams");

                            b1.ToTable("audio_streams", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_audio_streams_file_system_entries_file_system_file_id");
                        });

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.Values.SubtitleStream", "SubtitleStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("language");

                            b1.Property<string>("Title")
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("FileSystemFileId", "Id")
                                .HasName("pk_subtitle_streams");

                            b1.ToTable("subtitle_streams", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_subtitle_streams_file_system_entries_file_system_file_id");
                        });

                    b.OwnsMany("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.Values.VideoStream", "VideoStreams", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("file_system_file_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<long>("Bitrate")
                                .HasColumnType("bigint")
                                .HasColumnName("bitrate");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("codec");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("duration");

                            b1.Property<double>("Framerate")
                                .HasColumnType("double precision")
                                .HasColumnName("framerate");

                            b1.Property<int>("Index")
                                .HasColumnType("integer")
                                .HasColumnName("index");

                            b1.Property<string>("PixelFormat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("pixel_format");

                            b1.HasKey("FileSystemFileId", "Id")
                                .HasName("pk_video_streams");

                            b1.ToTable("video_streams", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_video_streams_file_system_entries_file_system_file_id");

                            b1.OwnsOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Files.Values.VideoQuality", "Quality", b2 =>
                                {
                                    b2.Property<Guid>("VideoStreamFileSystemFileId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("file_system_file_id");

                                    b2.Property<int>("VideoStreamId")
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    b2.Property<string>("AspectRatio")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("quality_aspect_ratio");

                                    b2.Property<int>("Height")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_height");

                                    b2.Property<int>("Resolution")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_resolution");

                                    b2.Property<int>("Width")
                                        .HasColumnType("integer")
                                        .HasColumnName("quality_width");

                                    b2.HasKey("VideoStreamFileSystemFileId", "VideoStreamId");

                                    b2.ToTable("video_streams", "public");

                                    b2.WithOwner()
                                        .HasForeignKey("VideoStreamFileSystemFileId", "VideoStreamId")
                                        .HasConstraintName("fk_video_streams_video_streams_file_system_file_id_id");
                                });

                            b1.Navigation("Quality")
                                .IsRequired();
                        });

                    b.Navigation("AudioStreams");

                    b.Navigation("PathInfo")
                        .IsRequired();

                    b.Navigation("SubtitleStreams");

                    b.Navigation("VideoStreams");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Library", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Entries.Directories.FileSystemDirectory", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
