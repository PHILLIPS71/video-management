// <auto-generated />
using System;
using Giantnodes.Service.Dashboard.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Giantnodes.Service.Dashboard.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ParentDirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_directory_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentDirectoryId")
                        .HasDatabaseName("ix_file_system_entries_parent_directory_id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("concurrency_token");

                    b.Property<Guid>("DirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("directory_id");

                    b.Property<string>("DriveStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("drive_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_libraries");

                    b.HasIndex("DirectoryId")
                        .HasDatabaseName("ix_libraries_directory_id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_libraries_slug");

                    b.ToTable("libraries", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemDirectory", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemEntry");

                    b.ToTable("FileSystemDirectories", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemFile", b =>
                {
                    b.HasBaseType("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemEntry");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.ToTable("FileSystemFiles", "public");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemEntry", b =>
                {
                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemDirectory", "ParentDirectory")
                        .WithMany("Entries")
                        .HasForeignKey("ParentDirectoryId")
                        .HasConstraintName("fk_file_system_entries_file_system_directories_parent_directory_id");

                    b.Navigation("ParentDirectory");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.Library", b =>
                {
                    b.HasOne("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemDirectory", "Directory")
                        .WithMany()
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_libraries_file_system_entries_directory_id");

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemDirectory", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemDirectoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemDirectoryId");

                            b1.ToTable("FileSystemDirectories", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemDirectoryId")
                                .HasConstraintName("fk_file_system_directories_file_system_directories_id");
                        });

                    b.Navigation("PathInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemFile", b =>
                {
                    b.OwnsOne("Giantnodes.Service.Dashboard.Domain.Values.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("FileSystemFileId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("DirectoryPath")
                                .HasColumnType("text")
                                .HasColumnName("path_info_directory_path");

                            b1.Property<string>("Extension")
                                .HasColumnType("text")
                                .HasColumnName("path_info_extension");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_full_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_info_name");

                            b1.HasKey("FileSystemFileId");

                            b1.ToTable("FileSystemFiles", "public");

                            b1.WithOwner()
                                .HasForeignKey("FileSystemFileId")
                                .HasConstraintName("fk_file_system_files_file_system_files_id");
                        });

                    b.Navigation("PathInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Giantnodes.Service.Dashboard.Domain.Aggregates.Libraries.Entities.FileSystemDirectory", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
